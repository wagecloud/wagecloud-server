generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

generator dbml {
  provider              = "prisma-dbml-generator"
  mapToDbSchema         = false
  includeRelationFields = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["account", "instance", "os", "payment"]
}

// Account

model AccountBase {
  id         BigInt   @id @default(autoincrement())
  type       AccountType
  name       String   @db.VarChar(255)
  username   String   @unique
  password   String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  User     AccountUser?
  Payments Payment[]

  @@map("base")
  @@schema("account")
}

model AccountUser {
  id    BigInt @id
  email String @unique

  Instances Instance[]

  Account AccountBase @relation(fields: [id], references: [id])

  @@map("user")
  @@schema("account")
}

enum AccountType {
  ACCOUNT_TYPE_ADMIN
  ACCOUNT_TYPE_USER

  @@map("type")
  @@schema("account")
}

// Instance

model Instance {
  id         String @id
  account_id BigInt
  os_id      String
  arch_id    String

  name       String
  cpu        Int
  ram        Int // In MB
  storage    Int // In GB
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  User    AccountUser @relation(fields: [account_id], references: [id])
  OS      OS          @relation(fields: [os_id], references: [id])
  Arch    Arch        @relation(fields: [arch_id], references: [id])

  Network Network?

  @@map("base")
  @@schema("instance")
}

model Network {
  id         String   @id
  private_ip String
  created_at DateTime @default(now()) @db.Timestamptz(3)

  Instance  Instance @relation(fields: [id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("network")
  @@schema("instance")
}

// OS infomation

// Only os name: ubuntu, centos, debian, ...
model OS {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now()) @db.Timestamptz(3)

  Instances Instance[]
  OSImages  OSImage[]

  @@map("base")
  @@schema("os")
}

model Arch {
  id         String   @id
  name       String
  created_at DateTime @default(now()) @db.Timestamptz(3)

  Instances Instance[]
  OSImages  OSImage[]

  @@map("arch")
  @@schema("os")
}

model OSImage {
  id         String   @id
  name       String
  os_id      String
  arch_id    String
  created_at DateTime @default(now()) @db.Timestamptz(3)

  OS   OS   @relation(fields: [os_id], references: [id])
  Arch Arch @relation(fields: [arch_id], references: [id])

  @@map("image")
  @@schema("os")
}

// Payment

model PaymentItem {
  id         BigInt @id @default(autoincrement())
  payment_id BigInt
  name       String
  price      BigInt

  payment Payment @relation(fields: [payment_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("item")
  @@schema("payment")
}

model Payment {
  id           BigInt        @id @default(autoincrement())
  account_id   BigInt
  method       PaymentMethod
  status       PaymentStatus
  total        BigInt
  date_created DateTime      @default(now()) @db.Timestamptz(3)

  account AccountBase   @relation(fields: [account_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  items   PaymentItem[]
  vnpay   PaymentVnpay?

  @@map("base")
  @@schema("payment")
}

model PaymentVnpay {
  id                  BigInt @id
  vnp_TxnRef          String
  vnp_OrderInfo       String
  vnp_TransactionNo   String
  vnp_TransactionDate String
  vnp_CreateDate      String
  vnp_IpAddr          String

  payment Payment @relation(fields: [id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("vnpay")
  @@schema("payment")
}

enum PaymentMethod {
  PAYMENT_METHOD_UNKNOWN
  PAYMENT_METHOD_VNPAY
  PAYMENT_METHOD_MOMO

  @@map("method")
  @@schema("payment")
}

enum PaymentStatus {
  PAYMENT_STATUS_UNKNOWN
  PAYMENT_STATUS_PENDING
  PAYMENT_STATUS_SUCCESS
  PAYMENT_STATUS_CANCELED
  PAYMENT_STATUS_FAILED

  @@map("status")
  @@schema("payment")
}
