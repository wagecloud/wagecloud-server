// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: payment/v1/payment.proto

package paymentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wagecloud/wagecloud-server/gen/pb/payment/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PaymentServiceName is the fully-qualified name of the PaymentService service.
	PaymentServiceName = "payment.v1.PaymentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PaymentServiceGetPaymentProcedure is the fully-qualified name of the PaymentService's GetPayment
	// RPC.
	PaymentServiceGetPaymentProcedure = "/payment.v1.PaymentService/GetPayment"
	// PaymentServiceListPaymentsProcedure is the fully-qualified name of the PaymentService's
	// ListPayments RPC.
	PaymentServiceListPaymentsProcedure = "/payment.v1.PaymentService/ListPayments"
	// PaymentServiceCreatePaymentProcedure is the fully-qualified name of the PaymentService's
	// CreatePayment RPC.
	PaymentServiceCreatePaymentProcedure = "/payment.v1.PaymentService/CreatePayment"
	// PaymentServiceUpdatePaymentProcedure is the fully-qualified name of the PaymentService's
	// UpdatePayment RPC.
	PaymentServiceUpdatePaymentProcedure = "/payment.v1.PaymentService/UpdatePayment"
	// PaymentServiceDeletePaymentProcedure is the fully-qualified name of the PaymentService's
	// DeletePayment RPC.
	PaymentServiceDeletePaymentProcedure = "/payment.v1.PaymentService/DeletePayment"
	// PaymentServiceCreatePaymentItemProcedure is the fully-qualified name of the PaymentService's
	// CreatePaymentItem RPC.
	PaymentServiceCreatePaymentItemProcedure = "/payment.v1.PaymentService/CreatePaymentItem"
	// PaymentServiceCreateVNPAYPaymentProcedure is the fully-qualified name of the PaymentService's
	// CreateVNPAYPayment RPC.
	PaymentServiceCreateVNPAYPaymentProcedure = "/payment.v1.PaymentService/CreateVNPAYPayment"
)

// PaymentServiceClient is a client for the payment.v1.PaymentService service.
type PaymentServiceClient interface {
	// Get payment by ID
	GetPayment(context.Context, *connect.Request[v1.GetPaymentRequest]) (*connect.Response[v1.GetPaymentResponse], error)
	// List payments
	ListPayments(context.Context, *connect.Request[v1.ListPaymentsRequest]) (*connect.Response[v1.ListPaymentsResponse], error)
	// Create payment
	CreatePayment(context.Context, *connect.Request[v1.CreatePaymentRequest]) (*connect.Response[v1.CreatePaymentResponse], error)
	// Update payment
	UpdatePayment(context.Context, *connect.Request[v1.UpdatePaymentRequest]) (*connect.Response[v1.UpdatePaymentResponse], error)
	// Delete payment
	DeletePayment(context.Context, *connect.Request[v1.DeletePaymentRequest]) (*connect.Response[v1.DeletePaymentResponse], error)
	// Create payment item
	CreatePaymentItem(context.Context, *connect.Request[v1.CreatePaymentItemRequest]) (*connect.Response[v1.CreatePaymentItemResponse], error)
	// Create VNPAY payment
	CreateVNPAYPayment(context.Context, *connect.Request[v1.CreateVNPAYPaymentRequest]) (*connect.Response[v1.CreateVNPAYPaymentResponse], error)
}

// NewPaymentServiceClient constructs a client for the payment.v1.PaymentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPaymentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PaymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	paymentServiceMethods := v1.File_payment_v1_payment_proto.Services().ByName("PaymentService").Methods()
	return &paymentServiceClient{
		getPayment: connect.NewClient[v1.GetPaymentRequest, v1.GetPaymentResponse](
			httpClient,
			baseURL+PaymentServiceGetPaymentProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("GetPayment")),
			connect.WithClientOptions(opts...),
		),
		listPayments: connect.NewClient[v1.ListPaymentsRequest, v1.ListPaymentsResponse](
			httpClient,
			baseURL+PaymentServiceListPaymentsProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("ListPayments")),
			connect.WithClientOptions(opts...),
		),
		createPayment: connect.NewClient[v1.CreatePaymentRequest, v1.CreatePaymentResponse](
			httpClient,
			baseURL+PaymentServiceCreatePaymentProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("CreatePayment")),
			connect.WithClientOptions(opts...),
		),
		updatePayment: connect.NewClient[v1.UpdatePaymentRequest, v1.UpdatePaymentResponse](
			httpClient,
			baseURL+PaymentServiceUpdatePaymentProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("UpdatePayment")),
			connect.WithClientOptions(opts...),
		),
		deletePayment: connect.NewClient[v1.DeletePaymentRequest, v1.DeletePaymentResponse](
			httpClient,
			baseURL+PaymentServiceDeletePaymentProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("DeletePayment")),
			connect.WithClientOptions(opts...),
		),
		createPaymentItem: connect.NewClient[v1.CreatePaymentItemRequest, v1.CreatePaymentItemResponse](
			httpClient,
			baseURL+PaymentServiceCreatePaymentItemProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("CreatePaymentItem")),
			connect.WithClientOptions(opts...),
		),
		createVNPAYPayment: connect.NewClient[v1.CreateVNPAYPaymentRequest, v1.CreateVNPAYPaymentResponse](
			httpClient,
			baseURL+PaymentServiceCreateVNPAYPaymentProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("CreateVNPAYPayment")),
			connect.WithClientOptions(opts...),
		),
	}
}

// paymentServiceClient implements PaymentServiceClient.
type paymentServiceClient struct {
	getPayment         *connect.Client[v1.GetPaymentRequest, v1.GetPaymentResponse]
	listPayments       *connect.Client[v1.ListPaymentsRequest, v1.ListPaymentsResponse]
	createPayment      *connect.Client[v1.CreatePaymentRequest, v1.CreatePaymentResponse]
	updatePayment      *connect.Client[v1.UpdatePaymentRequest, v1.UpdatePaymentResponse]
	deletePayment      *connect.Client[v1.DeletePaymentRequest, v1.DeletePaymentResponse]
	createPaymentItem  *connect.Client[v1.CreatePaymentItemRequest, v1.CreatePaymentItemResponse]
	createVNPAYPayment *connect.Client[v1.CreateVNPAYPaymentRequest, v1.CreateVNPAYPaymentResponse]
}

// GetPayment calls payment.v1.PaymentService.GetPayment.
func (c *paymentServiceClient) GetPayment(ctx context.Context, req *connect.Request[v1.GetPaymentRequest]) (*connect.Response[v1.GetPaymentResponse], error) {
	return c.getPayment.CallUnary(ctx, req)
}

// ListPayments calls payment.v1.PaymentService.ListPayments.
func (c *paymentServiceClient) ListPayments(ctx context.Context, req *connect.Request[v1.ListPaymentsRequest]) (*connect.Response[v1.ListPaymentsResponse], error) {
	return c.listPayments.CallUnary(ctx, req)
}

// CreatePayment calls payment.v1.PaymentService.CreatePayment.
func (c *paymentServiceClient) CreatePayment(ctx context.Context, req *connect.Request[v1.CreatePaymentRequest]) (*connect.Response[v1.CreatePaymentResponse], error) {
	return c.createPayment.CallUnary(ctx, req)
}

// UpdatePayment calls payment.v1.PaymentService.UpdatePayment.
func (c *paymentServiceClient) UpdatePayment(ctx context.Context, req *connect.Request[v1.UpdatePaymentRequest]) (*connect.Response[v1.UpdatePaymentResponse], error) {
	return c.updatePayment.CallUnary(ctx, req)
}

// DeletePayment calls payment.v1.PaymentService.DeletePayment.
func (c *paymentServiceClient) DeletePayment(ctx context.Context, req *connect.Request[v1.DeletePaymentRequest]) (*connect.Response[v1.DeletePaymentResponse], error) {
	return c.deletePayment.CallUnary(ctx, req)
}

// CreatePaymentItem calls payment.v1.PaymentService.CreatePaymentItem.
func (c *paymentServiceClient) CreatePaymentItem(ctx context.Context, req *connect.Request[v1.CreatePaymentItemRequest]) (*connect.Response[v1.CreatePaymentItemResponse], error) {
	return c.createPaymentItem.CallUnary(ctx, req)
}

// CreateVNPAYPayment calls payment.v1.PaymentService.CreateVNPAYPayment.
func (c *paymentServiceClient) CreateVNPAYPayment(ctx context.Context, req *connect.Request[v1.CreateVNPAYPaymentRequest]) (*connect.Response[v1.CreateVNPAYPaymentResponse], error) {
	return c.createVNPAYPayment.CallUnary(ctx, req)
}

// PaymentServiceHandler is an implementation of the payment.v1.PaymentService service.
type PaymentServiceHandler interface {
	// Get payment by ID
	GetPayment(context.Context, *connect.Request[v1.GetPaymentRequest]) (*connect.Response[v1.GetPaymentResponse], error)
	// List payments
	ListPayments(context.Context, *connect.Request[v1.ListPaymentsRequest]) (*connect.Response[v1.ListPaymentsResponse], error)
	// Create payment
	CreatePayment(context.Context, *connect.Request[v1.CreatePaymentRequest]) (*connect.Response[v1.CreatePaymentResponse], error)
	// Update payment
	UpdatePayment(context.Context, *connect.Request[v1.UpdatePaymentRequest]) (*connect.Response[v1.UpdatePaymentResponse], error)
	// Delete payment
	DeletePayment(context.Context, *connect.Request[v1.DeletePaymentRequest]) (*connect.Response[v1.DeletePaymentResponse], error)
	// Create payment item
	CreatePaymentItem(context.Context, *connect.Request[v1.CreatePaymentItemRequest]) (*connect.Response[v1.CreatePaymentItemResponse], error)
	// Create VNPAY payment
	CreateVNPAYPayment(context.Context, *connect.Request[v1.CreateVNPAYPaymentRequest]) (*connect.Response[v1.CreateVNPAYPaymentResponse], error)
}

// NewPaymentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPaymentServiceHandler(svc PaymentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	paymentServiceMethods := v1.File_payment_v1_payment_proto.Services().ByName("PaymentService").Methods()
	paymentServiceGetPaymentHandler := connect.NewUnaryHandler(
		PaymentServiceGetPaymentProcedure,
		svc.GetPayment,
		connect.WithSchema(paymentServiceMethods.ByName("GetPayment")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceListPaymentsHandler := connect.NewUnaryHandler(
		PaymentServiceListPaymentsProcedure,
		svc.ListPayments,
		connect.WithSchema(paymentServiceMethods.ByName("ListPayments")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceCreatePaymentHandler := connect.NewUnaryHandler(
		PaymentServiceCreatePaymentProcedure,
		svc.CreatePayment,
		connect.WithSchema(paymentServiceMethods.ByName("CreatePayment")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceUpdatePaymentHandler := connect.NewUnaryHandler(
		PaymentServiceUpdatePaymentProcedure,
		svc.UpdatePayment,
		connect.WithSchema(paymentServiceMethods.ByName("UpdatePayment")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceDeletePaymentHandler := connect.NewUnaryHandler(
		PaymentServiceDeletePaymentProcedure,
		svc.DeletePayment,
		connect.WithSchema(paymentServiceMethods.ByName("DeletePayment")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceCreatePaymentItemHandler := connect.NewUnaryHandler(
		PaymentServiceCreatePaymentItemProcedure,
		svc.CreatePaymentItem,
		connect.WithSchema(paymentServiceMethods.ByName("CreatePaymentItem")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceCreateVNPAYPaymentHandler := connect.NewUnaryHandler(
		PaymentServiceCreateVNPAYPaymentProcedure,
		svc.CreateVNPAYPayment,
		connect.WithSchema(paymentServiceMethods.ByName("CreateVNPAYPayment")),
		connect.WithHandlerOptions(opts...),
	)
	return "/payment.v1.PaymentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PaymentServiceGetPaymentProcedure:
			paymentServiceGetPaymentHandler.ServeHTTP(w, r)
		case PaymentServiceListPaymentsProcedure:
			paymentServiceListPaymentsHandler.ServeHTTP(w, r)
		case PaymentServiceCreatePaymentProcedure:
			paymentServiceCreatePaymentHandler.ServeHTTP(w, r)
		case PaymentServiceUpdatePaymentProcedure:
			paymentServiceUpdatePaymentHandler.ServeHTTP(w, r)
		case PaymentServiceDeletePaymentProcedure:
			paymentServiceDeletePaymentHandler.ServeHTTP(w, r)
		case PaymentServiceCreatePaymentItemProcedure:
			paymentServiceCreatePaymentItemHandler.ServeHTTP(w, r)
		case PaymentServiceCreateVNPAYPaymentProcedure:
			paymentServiceCreateVNPAYPaymentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPaymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPaymentServiceHandler struct{}

func (UnimplementedPaymentServiceHandler) GetPayment(context.Context, *connect.Request[v1.GetPaymentRequest]) (*connect.Response[v1.GetPaymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.GetPayment is not implemented"))
}

func (UnimplementedPaymentServiceHandler) ListPayments(context.Context, *connect.Request[v1.ListPaymentsRequest]) (*connect.Response[v1.ListPaymentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.ListPayments is not implemented"))
}

func (UnimplementedPaymentServiceHandler) CreatePayment(context.Context, *connect.Request[v1.CreatePaymentRequest]) (*connect.Response[v1.CreatePaymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.CreatePayment is not implemented"))
}

func (UnimplementedPaymentServiceHandler) UpdatePayment(context.Context, *connect.Request[v1.UpdatePaymentRequest]) (*connect.Response[v1.UpdatePaymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.UpdatePayment is not implemented"))
}

func (UnimplementedPaymentServiceHandler) DeletePayment(context.Context, *connect.Request[v1.DeletePaymentRequest]) (*connect.Response[v1.DeletePaymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.DeletePayment is not implemented"))
}

func (UnimplementedPaymentServiceHandler) CreatePaymentItem(context.Context, *connect.Request[v1.CreatePaymentItemRequest]) (*connect.Response[v1.CreatePaymentItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.CreatePaymentItem is not implemented"))
}

func (UnimplementedPaymentServiceHandler) CreateVNPAYPayment(context.Context, *connect.Request[v1.CreateVNPAYPaymentRequest]) (*connect.Response[v1.CreateVNPAYPaymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.CreateVNPAYPayment is not implemented"))
}
