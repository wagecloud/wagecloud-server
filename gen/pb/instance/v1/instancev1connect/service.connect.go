// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: instance/v1/service.proto

package instancev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wagecloud/wagecloud-server/gen/pb/instance/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InstanceServiceName is the fully-qualified name of the InstanceService service.
	InstanceServiceName = "instance.v1.InstanceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InstanceServiceGetInstanceProcedure is the fully-qualified name of the InstanceService's
	// GetInstance RPC.
	InstanceServiceGetInstanceProcedure = "/instance.v1.InstanceService/GetInstance"
	// InstanceServiceListInstancesProcedure is the fully-qualified name of the InstanceService's
	// ListInstances RPC.
	InstanceServiceListInstancesProcedure = "/instance.v1.InstanceService/ListInstances"
	// InstanceServiceCreateInstanceProcedure is the fully-qualified name of the InstanceService's
	// CreateInstance RPC.
	InstanceServiceCreateInstanceProcedure = "/instance.v1.InstanceService/CreateInstance"
	// InstanceServiceUpdateInstanceProcedure is the fully-qualified name of the InstanceService's
	// UpdateInstance RPC.
	InstanceServiceUpdateInstanceProcedure = "/instance.v1.InstanceService/UpdateInstance"
	// InstanceServiceDeleteInstanceProcedure is the fully-qualified name of the InstanceService's
	// DeleteInstance RPC.
	InstanceServiceDeleteInstanceProcedure = "/instance.v1.InstanceService/DeleteInstance"
	// InstanceServiceStartInstanceProcedure is the fully-qualified name of the InstanceService's
	// StartInstance RPC.
	InstanceServiceStartInstanceProcedure = "/instance.v1.InstanceService/StartInstance"
	// InstanceServiceStopInstanceProcedure is the fully-qualified name of the InstanceService's
	// StopInstance RPC.
	InstanceServiceStopInstanceProcedure = "/instance.v1.InstanceService/StopInstance"
	// InstanceServiceGetNetworkProcedure is the fully-qualified name of the InstanceService's
	// GetNetwork RPC.
	InstanceServiceGetNetworkProcedure = "/instance.v1.InstanceService/GetNetwork"
	// InstanceServiceListNetworksProcedure is the fully-qualified name of the InstanceService's
	// ListNetworks RPC.
	InstanceServiceListNetworksProcedure = "/instance.v1.InstanceService/ListNetworks"
	// InstanceServiceCreateNetworkProcedure is the fully-qualified name of the InstanceService's
	// CreateNetwork RPC.
	InstanceServiceCreateNetworkProcedure = "/instance.v1.InstanceService/CreateNetwork"
	// InstanceServiceUpdateNetworkProcedure is the fully-qualified name of the InstanceService's
	// UpdateNetwork RPC.
	InstanceServiceUpdateNetworkProcedure = "/instance.v1.InstanceService/UpdateNetwork"
	// InstanceServiceDeleteNetworkProcedure is the fully-qualified name of the InstanceService's
	// DeleteNetwork RPC.
	InstanceServiceDeleteNetworkProcedure = "/instance.v1.InstanceService/DeleteNetwork"
)

// InstanceServiceClient is a client for the instance.v1.InstanceService service.
type InstanceServiceClient interface {
	// Get instance by ID
	GetInstance(context.Context, *connect.Request[v1.GetInstanceRequest]) (*connect.Response[v1.GetInstanceResponse], error)
	// List instances
	ListInstances(context.Context, *connect.Request[v1.ListInstancesRequest]) (*connect.Response[v1.ListInstancesResponse], error)
	// Create instance
	CreateInstance(context.Context, *connect.Request[v1.CreateInstanceRequest]) (*connect.Response[v1.CreateInstanceResponse], error)
	// Update instance
	UpdateInstance(context.Context, *connect.Request[v1.UpdateInstanceRequest]) (*connect.Response[v1.UpdateInstanceResponse], error)
	// Delete instance
	DeleteInstance(context.Context, *connect.Request[v1.DeleteInstanceRequest]) (*connect.Response[v1.DeleteInstanceResponse], error)
	// Start instance
	StartInstance(context.Context, *connect.Request[v1.StartInstanceRequest]) (*connect.Response[v1.StartInstanceResponse], error)
	// Stop instance
	StopInstance(context.Context, *connect.Request[v1.StopInstanceRequest]) (*connect.Response[v1.StopInstanceResponse], error)
	// Get network by ID
	GetNetwork(context.Context, *connect.Request[v1.GetNetworkRequest]) (*connect.Response[v1.GetNetworkResponse], error)
	// List networks
	ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error)
	// Create network
	CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.CreateNetworkResponse], error)
	// Update network
	UpdateNetwork(context.Context, *connect.Request[v1.UpdateNetworkRequest]) (*connect.Response[v1.UpdateNetworkResponse], error)
	// Delete network
	DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[v1.DeleteNetworkResponse], error)
}

// NewInstanceServiceClient constructs a client for the instance.v1.InstanceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInstanceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InstanceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	instanceServiceMethods := v1.File_instance_v1_service_proto.Services().ByName("InstanceService").Methods()
	return &instanceServiceClient{
		getInstance: connect.NewClient[v1.GetInstanceRequest, v1.GetInstanceResponse](
			httpClient,
			baseURL+InstanceServiceGetInstanceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("GetInstance")),
			connect.WithClientOptions(opts...),
		),
		listInstances: connect.NewClient[v1.ListInstancesRequest, v1.ListInstancesResponse](
			httpClient,
			baseURL+InstanceServiceListInstancesProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("ListInstances")),
			connect.WithClientOptions(opts...),
		),
		createInstance: connect.NewClient[v1.CreateInstanceRequest, v1.CreateInstanceResponse](
			httpClient,
			baseURL+InstanceServiceCreateInstanceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("CreateInstance")),
			connect.WithClientOptions(opts...),
		),
		updateInstance: connect.NewClient[v1.UpdateInstanceRequest, v1.UpdateInstanceResponse](
			httpClient,
			baseURL+InstanceServiceUpdateInstanceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("UpdateInstance")),
			connect.WithClientOptions(opts...),
		),
		deleteInstance: connect.NewClient[v1.DeleteInstanceRequest, v1.DeleteInstanceResponse](
			httpClient,
			baseURL+InstanceServiceDeleteInstanceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("DeleteInstance")),
			connect.WithClientOptions(opts...),
		),
		startInstance: connect.NewClient[v1.StartInstanceRequest, v1.StartInstanceResponse](
			httpClient,
			baseURL+InstanceServiceStartInstanceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("StartInstance")),
			connect.WithClientOptions(opts...),
		),
		stopInstance: connect.NewClient[v1.StopInstanceRequest, v1.StopInstanceResponse](
			httpClient,
			baseURL+InstanceServiceStopInstanceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("StopInstance")),
			connect.WithClientOptions(opts...),
		),
		getNetwork: connect.NewClient[v1.GetNetworkRequest, v1.GetNetworkResponse](
			httpClient,
			baseURL+InstanceServiceGetNetworkProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("GetNetwork")),
			connect.WithClientOptions(opts...),
		),
		listNetworks: connect.NewClient[v1.ListNetworksRequest, v1.ListNetworksResponse](
			httpClient,
			baseURL+InstanceServiceListNetworksProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("ListNetworks")),
			connect.WithClientOptions(opts...),
		),
		createNetwork: connect.NewClient[v1.CreateNetworkRequest, v1.CreateNetworkResponse](
			httpClient,
			baseURL+InstanceServiceCreateNetworkProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("CreateNetwork")),
			connect.WithClientOptions(opts...),
		),
		updateNetwork: connect.NewClient[v1.UpdateNetworkRequest, v1.UpdateNetworkResponse](
			httpClient,
			baseURL+InstanceServiceUpdateNetworkProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("UpdateNetwork")),
			connect.WithClientOptions(opts...),
		),
		deleteNetwork: connect.NewClient[v1.DeleteNetworkRequest, v1.DeleteNetworkResponse](
			httpClient,
			baseURL+InstanceServiceDeleteNetworkProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("DeleteNetwork")),
			connect.WithClientOptions(opts...),
		),
	}
}

// instanceServiceClient implements InstanceServiceClient.
type instanceServiceClient struct {
	getInstance    *connect.Client[v1.GetInstanceRequest, v1.GetInstanceResponse]
	listInstances  *connect.Client[v1.ListInstancesRequest, v1.ListInstancesResponse]
	createInstance *connect.Client[v1.CreateInstanceRequest, v1.CreateInstanceResponse]
	updateInstance *connect.Client[v1.UpdateInstanceRequest, v1.UpdateInstanceResponse]
	deleteInstance *connect.Client[v1.DeleteInstanceRequest, v1.DeleteInstanceResponse]
	startInstance  *connect.Client[v1.StartInstanceRequest, v1.StartInstanceResponse]
	stopInstance   *connect.Client[v1.StopInstanceRequest, v1.StopInstanceResponse]
	getNetwork     *connect.Client[v1.GetNetworkRequest, v1.GetNetworkResponse]
	listNetworks   *connect.Client[v1.ListNetworksRequest, v1.ListNetworksResponse]
	createNetwork  *connect.Client[v1.CreateNetworkRequest, v1.CreateNetworkResponse]
	updateNetwork  *connect.Client[v1.UpdateNetworkRequest, v1.UpdateNetworkResponse]
	deleteNetwork  *connect.Client[v1.DeleteNetworkRequest, v1.DeleteNetworkResponse]
}

// GetInstance calls instance.v1.InstanceService.GetInstance.
func (c *instanceServiceClient) GetInstance(ctx context.Context, req *connect.Request[v1.GetInstanceRequest]) (*connect.Response[v1.GetInstanceResponse], error) {
	return c.getInstance.CallUnary(ctx, req)
}

// ListInstances calls instance.v1.InstanceService.ListInstances.
func (c *instanceServiceClient) ListInstances(ctx context.Context, req *connect.Request[v1.ListInstancesRequest]) (*connect.Response[v1.ListInstancesResponse], error) {
	return c.listInstances.CallUnary(ctx, req)
}

// CreateInstance calls instance.v1.InstanceService.CreateInstance.
func (c *instanceServiceClient) CreateInstance(ctx context.Context, req *connect.Request[v1.CreateInstanceRequest]) (*connect.Response[v1.CreateInstanceResponse], error) {
	return c.createInstance.CallUnary(ctx, req)
}

// UpdateInstance calls instance.v1.InstanceService.UpdateInstance.
func (c *instanceServiceClient) UpdateInstance(ctx context.Context, req *connect.Request[v1.UpdateInstanceRequest]) (*connect.Response[v1.UpdateInstanceResponse], error) {
	return c.updateInstance.CallUnary(ctx, req)
}

// DeleteInstance calls instance.v1.InstanceService.DeleteInstance.
func (c *instanceServiceClient) DeleteInstance(ctx context.Context, req *connect.Request[v1.DeleteInstanceRequest]) (*connect.Response[v1.DeleteInstanceResponse], error) {
	return c.deleteInstance.CallUnary(ctx, req)
}

// StartInstance calls instance.v1.InstanceService.StartInstance.
func (c *instanceServiceClient) StartInstance(ctx context.Context, req *connect.Request[v1.StartInstanceRequest]) (*connect.Response[v1.StartInstanceResponse], error) {
	return c.startInstance.CallUnary(ctx, req)
}

// StopInstance calls instance.v1.InstanceService.StopInstance.
func (c *instanceServiceClient) StopInstance(ctx context.Context, req *connect.Request[v1.StopInstanceRequest]) (*connect.Response[v1.StopInstanceResponse], error) {
	return c.stopInstance.CallUnary(ctx, req)
}

// GetNetwork calls instance.v1.InstanceService.GetNetwork.
func (c *instanceServiceClient) GetNetwork(ctx context.Context, req *connect.Request[v1.GetNetworkRequest]) (*connect.Response[v1.GetNetworkResponse], error) {
	return c.getNetwork.CallUnary(ctx, req)
}

// ListNetworks calls instance.v1.InstanceService.ListNetworks.
func (c *instanceServiceClient) ListNetworks(ctx context.Context, req *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error) {
	return c.listNetworks.CallUnary(ctx, req)
}

// CreateNetwork calls instance.v1.InstanceService.CreateNetwork.
func (c *instanceServiceClient) CreateNetwork(ctx context.Context, req *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.CreateNetworkResponse], error) {
	return c.createNetwork.CallUnary(ctx, req)
}

// UpdateNetwork calls instance.v1.InstanceService.UpdateNetwork.
func (c *instanceServiceClient) UpdateNetwork(ctx context.Context, req *connect.Request[v1.UpdateNetworkRequest]) (*connect.Response[v1.UpdateNetworkResponse], error) {
	return c.updateNetwork.CallUnary(ctx, req)
}

// DeleteNetwork calls instance.v1.InstanceService.DeleteNetwork.
func (c *instanceServiceClient) DeleteNetwork(ctx context.Context, req *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[v1.DeleteNetworkResponse], error) {
	return c.deleteNetwork.CallUnary(ctx, req)
}

// InstanceServiceHandler is an implementation of the instance.v1.InstanceService service.
type InstanceServiceHandler interface {
	// Get instance by ID
	GetInstance(context.Context, *connect.Request[v1.GetInstanceRequest]) (*connect.Response[v1.GetInstanceResponse], error)
	// List instances
	ListInstances(context.Context, *connect.Request[v1.ListInstancesRequest]) (*connect.Response[v1.ListInstancesResponse], error)
	// Create instance
	CreateInstance(context.Context, *connect.Request[v1.CreateInstanceRequest]) (*connect.Response[v1.CreateInstanceResponse], error)
	// Update instance
	UpdateInstance(context.Context, *connect.Request[v1.UpdateInstanceRequest]) (*connect.Response[v1.UpdateInstanceResponse], error)
	// Delete instance
	DeleteInstance(context.Context, *connect.Request[v1.DeleteInstanceRequest]) (*connect.Response[v1.DeleteInstanceResponse], error)
	// Start instance
	StartInstance(context.Context, *connect.Request[v1.StartInstanceRequest]) (*connect.Response[v1.StartInstanceResponse], error)
	// Stop instance
	StopInstance(context.Context, *connect.Request[v1.StopInstanceRequest]) (*connect.Response[v1.StopInstanceResponse], error)
	// Get network by ID
	GetNetwork(context.Context, *connect.Request[v1.GetNetworkRequest]) (*connect.Response[v1.GetNetworkResponse], error)
	// List networks
	ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error)
	// Create network
	CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.CreateNetworkResponse], error)
	// Update network
	UpdateNetwork(context.Context, *connect.Request[v1.UpdateNetworkRequest]) (*connect.Response[v1.UpdateNetworkResponse], error)
	// Delete network
	DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[v1.DeleteNetworkResponse], error)
}

// NewInstanceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInstanceServiceHandler(svc InstanceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	instanceServiceMethods := v1.File_instance_v1_service_proto.Services().ByName("InstanceService").Methods()
	instanceServiceGetInstanceHandler := connect.NewUnaryHandler(
		InstanceServiceGetInstanceProcedure,
		svc.GetInstance,
		connect.WithSchema(instanceServiceMethods.ByName("GetInstance")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceListInstancesHandler := connect.NewUnaryHandler(
		InstanceServiceListInstancesProcedure,
		svc.ListInstances,
		connect.WithSchema(instanceServiceMethods.ByName("ListInstances")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceCreateInstanceHandler := connect.NewUnaryHandler(
		InstanceServiceCreateInstanceProcedure,
		svc.CreateInstance,
		connect.WithSchema(instanceServiceMethods.ByName("CreateInstance")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceUpdateInstanceHandler := connect.NewUnaryHandler(
		InstanceServiceUpdateInstanceProcedure,
		svc.UpdateInstance,
		connect.WithSchema(instanceServiceMethods.ByName("UpdateInstance")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceDeleteInstanceHandler := connect.NewUnaryHandler(
		InstanceServiceDeleteInstanceProcedure,
		svc.DeleteInstance,
		connect.WithSchema(instanceServiceMethods.ByName("DeleteInstance")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceStartInstanceHandler := connect.NewUnaryHandler(
		InstanceServiceStartInstanceProcedure,
		svc.StartInstance,
		connect.WithSchema(instanceServiceMethods.ByName("StartInstance")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceStopInstanceHandler := connect.NewUnaryHandler(
		InstanceServiceStopInstanceProcedure,
		svc.StopInstance,
		connect.WithSchema(instanceServiceMethods.ByName("StopInstance")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceGetNetworkHandler := connect.NewUnaryHandler(
		InstanceServiceGetNetworkProcedure,
		svc.GetNetwork,
		connect.WithSchema(instanceServiceMethods.ByName("GetNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceListNetworksHandler := connect.NewUnaryHandler(
		InstanceServiceListNetworksProcedure,
		svc.ListNetworks,
		connect.WithSchema(instanceServiceMethods.ByName("ListNetworks")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceCreateNetworkHandler := connect.NewUnaryHandler(
		InstanceServiceCreateNetworkProcedure,
		svc.CreateNetwork,
		connect.WithSchema(instanceServiceMethods.ByName("CreateNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceUpdateNetworkHandler := connect.NewUnaryHandler(
		InstanceServiceUpdateNetworkProcedure,
		svc.UpdateNetwork,
		connect.WithSchema(instanceServiceMethods.ByName("UpdateNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceDeleteNetworkHandler := connect.NewUnaryHandler(
		InstanceServiceDeleteNetworkProcedure,
		svc.DeleteNetwork,
		connect.WithSchema(instanceServiceMethods.ByName("DeleteNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	return "/instance.v1.InstanceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InstanceServiceGetInstanceProcedure:
			instanceServiceGetInstanceHandler.ServeHTTP(w, r)
		case InstanceServiceListInstancesProcedure:
			instanceServiceListInstancesHandler.ServeHTTP(w, r)
		case InstanceServiceCreateInstanceProcedure:
			instanceServiceCreateInstanceHandler.ServeHTTP(w, r)
		case InstanceServiceUpdateInstanceProcedure:
			instanceServiceUpdateInstanceHandler.ServeHTTP(w, r)
		case InstanceServiceDeleteInstanceProcedure:
			instanceServiceDeleteInstanceHandler.ServeHTTP(w, r)
		case InstanceServiceStartInstanceProcedure:
			instanceServiceStartInstanceHandler.ServeHTTP(w, r)
		case InstanceServiceStopInstanceProcedure:
			instanceServiceStopInstanceHandler.ServeHTTP(w, r)
		case InstanceServiceGetNetworkProcedure:
			instanceServiceGetNetworkHandler.ServeHTTP(w, r)
		case InstanceServiceListNetworksProcedure:
			instanceServiceListNetworksHandler.ServeHTTP(w, r)
		case InstanceServiceCreateNetworkProcedure:
			instanceServiceCreateNetworkHandler.ServeHTTP(w, r)
		case InstanceServiceUpdateNetworkProcedure:
			instanceServiceUpdateNetworkHandler.ServeHTTP(w, r)
		case InstanceServiceDeleteNetworkProcedure:
			instanceServiceDeleteNetworkHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInstanceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInstanceServiceHandler struct{}

func (UnimplementedInstanceServiceHandler) GetInstance(context.Context, *connect.Request[v1.GetInstanceRequest]) (*connect.Response[v1.GetInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("instance.v1.InstanceService.GetInstance is not implemented"))
}

func (UnimplementedInstanceServiceHandler) ListInstances(context.Context, *connect.Request[v1.ListInstancesRequest]) (*connect.Response[v1.ListInstancesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("instance.v1.InstanceService.ListInstances is not implemented"))
}

func (UnimplementedInstanceServiceHandler) CreateInstance(context.Context, *connect.Request[v1.CreateInstanceRequest]) (*connect.Response[v1.CreateInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("instance.v1.InstanceService.CreateInstance is not implemented"))
}

func (UnimplementedInstanceServiceHandler) UpdateInstance(context.Context, *connect.Request[v1.UpdateInstanceRequest]) (*connect.Response[v1.UpdateInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("instance.v1.InstanceService.UpdateInstance is not implemented"))
}

func (UnimplementedInstanceServiceHandler) DeleteInstance(context.Context, *connect.Request[v1.DeleteInstanceRequest]) (*connect.Response[v1.DeleteInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("instance.v1.InstanceService.DeleteInstance is not implemented"))
}

func (UnimplementedInstanceServiceHandler) StartInstance(context.Context, *connect.Request[v1.StartInstanceRequest]) (*connect.Response[v1.StartInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("instance.v1.InstanceService.StartInstance is not implemented"))
}

func (UnimplementedInstanceServiceHandler) StopInstance(context.Context, *connect.Request[v1.StopInstanceRequest]) (*connect.Response[v1.StopInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("instance.v1.InstanceService.StopInstance is not implemented"))
}

func (UnimplementedInstanceServiceHandler) GetNetwork(context.Context, *connect.Request[v1.GetNetworkRequest]) (*connect.Response[v1.GetNetworkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("instance.v1.InstanceService.GetNetwork is not implemented"))
}

func (UnimplementedInstanceServiceHandler) ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("instance.v1.InstanceService.ListNetworks is not implemented"))
}

func (UnimplementedInstanceServiceHandler) CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.CreateNetworkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("instance.v1.InstanceService.CreateNetwork is not implemented"))
}

func (UnimplementedInstanceServiceHandler) UpdateNetwork(context.Context, *connect.Request[v1.UpdateNetworkRequest]) (*connect.Response[v1.UpdateNetworkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("instance.v1.InstanceService.UpdateNetwork is not implemented"))
}

func (UnimplementedInstanceServiceHandler) DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[v1.DeleteNetworkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("instance.v1.InstanceService.DeleteNetwork is not implemented"))
}
