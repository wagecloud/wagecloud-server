// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: os/v1/service.proto

package osv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wagecloud/wagecloud-server/gen/pb/os/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OSServiceName is the fully-qualified name of the OSService service.
	OSServiceName = "os.v1.OSService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OSServiceGetOSProcedure is the fully-qualified name of the OSService's GetOS RPC.
	OSServiceGetOSProcedure = "/os.v1.OSService/GetOS"
	// OSServiceListOSsProcedure is the fully-qualified name of the OSService's ListOSs RPC.
	OSServiceListOSsProcedure = "/os.v1.OSService/ListOSs"
	// OSServiceCreateOSProcedure is the fully-qualified name of the OSService's CreateOS RPC.
	OSServiceCreateOSProcedure = "/os.v1.OSService/CreateOS"
	// OSServiceUpdateOSProcedure is the fully-qualified name of the OSService's UpdateOS RPC.
	OSServiceUpdateOSProcedure = "/os.v1.OSService/UpdateOS"
	// OSServiceDeleteOSProcedure is the fully-qualified name of the OSService's DeleteOS RPC.
	OSServiceDeleteOSProcedure = "/os.v1.OSService/DeleteOS"
	// OSServiceGetArchitectureProcedure is the fully-qualified name of the OSService's GetArchitecture
	// RPC.
	OSServiceGetArchitectureProcedure = "/os.v1.OSService/GetArchitecture"
	// OSServiceListArchitecturesProcedure is the fully-qualified name of the OSService's
	// ListArchitectures RPC.
	OSServiceListArchitecturesProcedure = "/os.v1.OSService/ListArchitectures"
	// OSServiceCreateArchitectureProcedure is the fully-qualified name of the OSService's
	// CreateArchitecture RPC.
	OSServiceCreateArchitectureProcedure = "/os.v1.OSService/CreateArchitecture"
	// OSServiceUpdateArchitectureProcedure is the fully-qualified name of the OSService's
	// UpdateArchitecture RPC.
	OSServiceUpdateArchitectureProcedure = "/os.v1.OSService/UpdateArchitecture"
	// OSServiceDeleteArchitectureProcedure is the fully-qualified name of the OSService's
	// DeleteArchitecture RPC.
	OSServiceDeleteArchitectureProcedure = "/os.v1.OSService/DeleteArchitecture"
)

// OSServiceClient is a client for the os.v1.OSService service.
type OSServiceClient interface {
	// Get OS by ID
	GetOS(context.Context, *connect.Request[v1.GetOSRequest]) (*connect.Response[v1.GetOSResponse], error)
	// List OSs
	ListOSs(context.Context, *connect.Request[v1.ListOSsRequest]) (*connect.Response[v1.ListOSsResponse], error)
	// Create OS
	CreateOS(context.Context, *connect.Request[v1.CreateOSRequest]) (*connect.Response[v1.CreateOSResponse], error)
	// Update OS
	UpdateOS(context.Context, *connect.Request[v1.UpdateOSRequest]) (*connect.Response[v1.UpdateOSResponse], error)
	// Delete OS
	DeleteOS(context.Context, *connect.Request[v1.DeleteOSRequest]) (*connect.Response[v1.DeleteOSResponse], error)
	// Get architecture by ID
	GetArchitecture(context.Context, *connect.Request[v1.GetArchitectureRequest]) (*connect.Response[v1.GetArchitectureResponse], error)
	// List architectures
	ListArchitectures(context.Context, *connect.Request[v1.ListArchitecturesRequest]) (*connect.Response[v1.ListArchitecturesResponse], error)
	// Create architecture
	CreateArchitecture(context.Context, *connect.Request[v1.CreateArchitectureRequest]) (*connect.Response[v1.CreateArchitectureResponse], error)
	// Update architecture
	UpdateArchitecture(context.Context, *connect.Request[v1.UpdateArchitectureRequest]) (*connect.Response[v1.UpdateArchitectureResponse], error)
	// Delete architecture
	DeleteArchitecture(context.Context, *connect.Request[v1.DeleteArchitectureRequest]) (*connect.Response[v1.DeleteArchitectureResponse], error)
}

// NewOSServiceClient constructs a client for the os.v1.OSService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOSServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OSServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	oSServiceMethods := v1.File_os_v1_service_proto.Services().ByName("OSService").Methods()
	return &oSServiceClient{
		getOS: connect.NewClient[v1.GetOSRequest, v1.GetOSResponse](
			httpClient,
			baseURL+OSServiceGetOSProcedure,
			connect.WithSchema(oSServiceMethods.ByName("GetOS")),
			connect.WithClientOptions(opts...),
		),
		listOSs: connect.NewClient[v1.ListOSsRequest, v1.ListOSsResponse](
			httpClient,
			baseURL+OSServiceListOSsProcedure,
			connect.WithSchema(oSServiceMethods.ByName("ListOSs")),
			connect.WithClientOptions(opts...),
		),
		createOS: connect.NewClient[v1.CreateOSRequest, v1.CreateOSResponse](
			httpClient,
			baseURL+OSServiceCreateOSProcedure,
			connect.WithSchema(oSServiceMethods.ByName("CreateOS")),
			connect.WithClientOptions(opts...),
		),
		updateOS: connect.NewClient[v1.UpdateOSRequest, v1.UpdateOSResponse](
			httpClient,
			baseURL+OSServiceUpdateOSProcedure,
			connect.WithSchema(oSServiceMethods.ByName("UpdateOS")),
			connect.WithClientOptions(opts...),
		),
		deleteOS: connect.NewClient[v1.DeleteOSRequest, v1.DeleteOSResponse](
			httpClient,
			baseURL+OSServiceDeleteOSProcedure,
			connect.WithSchema(oSServiceMethods.ByName("DeleteOS")),
			connect.WithClientOptions(opts...),
		),
		getArchitecture: connect.NewClient[v1.GetArchitectureRequest, v1.GetArchitectureResponse](
			httpClient,
			baseURL+OSServiceGetArchitectureProcedure,
			connect.WithSchema(oSServiceMethods.ByName("GetArchitecture")),
			connect.WithClientOptions(opts...),
		),
		listArchitectures: connect.NewClient[v1.ListArchitecturesRequest, v1.ListArchitecturesResponse](
			httpClient,
			baseURL+OSServiceListArchitecturesProcedure,
			connect.WithSchema(oSServiceMethods.ByName("ListArchitectures")),
			connect.WithClientOptions(opts...),
		),
		createArchitecture: connect.NewClient[v1.CreateArchitectureRequest, v1.CreateArchitectureResponse](
			httpClient,
			baseURL+OSServiceCreateArchitectureProcedure,
			connect.WithSchema(oSServiceMethods.ByName("CreateArchitecture")),
			connect.WithClientOptions(opts...),
		),
		updateArchitecture: connect.NewClient[v1.UpdateArchitectureRequest, v1.UpdateArchitectureResponse](
			httpClient,
			baseURL+OSServiceUpdateArchitectureProcedure,
			connect.WithSchema(oSServiceMethods.ByName("UpdateArchitecture")),
			connect.WithClientOptions(opts...),
		),
		deleteArchitecture: connect.NewClient[v1.DeleteArchitectureRequest, v1.DeleteArchitectureResponse](
			httpClient,
			baseURL+OSServiceDeleteArchitectureProcedure,
			connect.WithSchema(oSServiceMethods.ByName("DeleteArchitecture")),
			connect.WithClientOptions(opts...),
		),
	}
}

// oSServiceClient implements OSServiceClient.
type oSServiceClient struct {
	getOS              *connect.Client[v1.GetOSRequest, v1.GetOSResponse]
	listOSs            *connect.Client[v1.ListOSsRequest, v1.ListOSsResponse]
	createOS           *connect.Client[v1.CreateOSRequest, v1.CreateOSResponse]
	updateOS           *connect.Client[v1.UpdateOSRequest, v1.UpdateOSResponse]
	deleteOS           *connect.Client[v1.DeleteOSRequest, v1.DeleteOSResponse]
	getArchitecture    *connect.Client[v1.GetArchitectureRequest, v1.GetArchitectureResponse]
	listArchitectures  *connect.Client[v1.ListArchitecturesRequest, v1.ListArchitecturesResponse]
	createArchitecture *connect.Client[v1.CreateArchitectureRequest, v1.CreateArchitectureResponse]
	updateArchitecture *connect.Client[v1.UpdateArchitectureRequest, v1.UpdateArchitectureResponse]
	deleteArchitecture *connect.Client[v1.DeleteArchitectureRequest, v1.DeleteArchitectureResponse]
}

// GetOS calls os.v1.OSService.GetOS.
func (c *oSServiceClient) GetOS(ctx context.Context, req *connect.Request[v1.GetOSRequest]) (*connect.Response[v1.GetOSResponse], error) {
	return c.getOS.CallUnary(ctx, req)
}

// ListOSs calls os.v1.OSService.ListOSs.
func (c *oSServiceClient) ListOSs(ctx context.Context, req *connect.Request[v1.ListOSsRequest]) (*connect.Response[v1.ListOSsResponse], error) {
	return c.listOSs.CallUnary(ctx, req)
}

// CreateOS calls os.v1.OSService.CreateOS.
func (c *oSServiceClient) CreateOS(ctx context.Context, req *connect.Request[v1.CreateOSRequest]) (*connect.Response[v1.CreateOSResponse], error) {
	return c.createOS.CallUnary(ctx, req)
}

// UpdateOS calls os.v1.OSService.UpdateOS.
func (c *oSServiceClient) UpdateOS(ctx context.Context, req *connect.Request[v1.UpdateOSRequest]) (*connect.Response[v1.UpdateOSResponse], error) {
	return c.updateOS.CallUnary(ctx, req)
}

// DeleteOS calls os.v1.OSService.DeleteOS.
func (c *oSServiceClient) DeleteOS(ctx context.Context, req *connect.Request[v1.DeleteOSRequest]) (*connect.Response[v1.DeleteOSResponse], error) {
	return c.deleteOS.CallUnary(ctx, req)
}

// GetArchitecture calls os.v1.OSService.GetArchitecture.
func (c *oSServiceClient) GetArchitecture(ctx context.Context, req *connect.Request[v1.GetArchitectureRequest]) (*connect.Response[v1.GetArchitectureResponse], error) {
	return c.getArchitecture.CallUnary(ctx, req)
}

// ListArchitectures calls os.v1.OSService.ListArchitectures.
func (c *oSServiceClient) ListArchitectures(ctx context.Context, req *connect.Request[v1.ListArchitecturesRequest]) (*connect.Response[v1.ListArchitecturesResponse], error) {
	return c.listArchitectures.CallUnary(ctx, req)
}

// CreateArchitecture calls os.v1.OSService.CreateArchitecture.
func (c *oSServiceClient) CreateArchitecture(ctx context.Context, req *connect.Request[v1.CreateArchitectureRequest]) (*connect.Response[v1.CreateArchitectureResponse], error) {
	return c.createArchitecture.CallUnary(ctx, req)
}

// UpdateArchitecture calls os.v1.OSService.UpdateArchitecture.
func (c *oSServiceClient) UpdateArchitecture(ctx context.Context, req *connect.Request[v1.UpdateArchitectureRequest]) (*connect.Response[v1.UpdateArchitectureResponse], error) {
	return c.updateArchitecture.CallUnary(ctx, req)
}

// DeleteArchitecture calls os.v1.OSService.DeleteArchitecture.
func (c *oSServiceClient) DeleteArchitecture(ctx context.Context, req *connect.Request[v1.DeleteArchitectureRequest]) (*connect.Response[v1.DeleteArchitectureResponse], error) {
	return c.deleteArchitecture.CallUnary(ctx, req)
}

// OSServiceHandler is an implementation of the os.v1.OSService service.
type OSServiceHandler interface {
	// Get OS by ID
	GetOS(context.Context, *connect.Request[v1.GetOSRequest]) (*connect.Response[v1.GetOSResponse], error)
	// List OSs
	ListOSs(context.Context, *connect.Request[v1.ListOSsRequest]) (*connect.Response[v1.ListOSsResponse], error)
	// Create OS
	CreateOS(context.Context, *connect.Request[v1.CreateOSRequest]) (*connect.Response[v1.CreateOSResponse], error)
	// Update OS
	UpdateOS(context.Context, *connect.Request[v1.UpdateOSRequest]) (*connect.Response[v1.UpdateOSResponse], error)
	// Delete OS
	DeleteOS(context.Context, *connect.Request[v1.DeleteOSRequest]) (*connect.Response[v1.DeleteOSResponse], error)
	// Get architecture by ID
	GetArchitecture(context.Context, *connect.Request[v1.GetArchitectureRequest]) (*connect.Response[v1.GetArchitectureResponse], error)
	// List architectures
	ListArchitectures(context.Context, *connect.Request[v1.ListArchitecturesRequest]) (*connect.Response[v1.ListArchitecturesResponse], error)
	// Create architecture
	CreateArchitecture(context.Context, *connect.Request[v1.CreateArchitectureRequest]) (*connect.Response[v1.CreateArchitectureResponse], error)
	// Update architecture
	UpdateArchitecture(context.Context, *connect.Request[v1.UpdateArchitectureRequest]) (*connect.Response[v1.UpdateArchitectureResponse], error)
	// Delete architecture
	DeleteArchitecture(context.Context, *connect.Request[v1.DeleteArchitectureRequest]) (*connect.Response[v1.DeleteArchitectureResponse], error)
}

// NewOSServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOSServiceHandler(svc OSServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	oSServiceMethods := v1.File_os_v1_service_proto.Services().ByName("OSService").Methods()
	oSServiceGetOSHandler := connect.NewUnaryHandler(
		OSServiceGetOSProcedure,
		svc.GetOS,
		connect.WithSchema(oSServiceMethods.ByName("GetOS")),
		connect.WithHandlerOptions(opts...),
	)
	oSServiceListOSsHandler := connect.NewUnaryHandler(
		OSServiceListOSsProcedure,
		svc.ListOSs,
		connect.WithSchema(oSServiceMethods.ByName("ListOSs")),
		connect.WithHandlerOptions(opts...),
	)
	oSServiceCreateOSHandler := connect.NewUnaryHandler(
		OSServiceCreateOSProcedure,
		svc.CreateOS,
		connect.WithSchema(oSServiceMethods.ByName("CreateOS")),
		connect.WithHandlerOptions(opts...),
	)
	oSServiceUpdateOSHandler := connect.NewUnaryHandler(
		OSServiceUpdateOSProcedure,
		svc.UpdateOS,
		connect.WithSchema(oSServiceMethods.ByName("UpdateOS")),
		connect.WithHandlerOptions(opts...),
	)
	oSServiceDeleteOSHandler := connect.NewUnaryHandler(
		OSServiceDeleteOSProcedure,
		svc.DeleteOS,
		connect.WithSchema(oSServiceMethods.ByName("DeleteOS")),
		connect.WithHandlerOptions(opts...),
	)
	oSServiceGetArchitectureHandler := connect.NewUnaryHandler(
		OSServiceGetArchitectureProcedure,
		svc.GetArchitecture,
		connect.WithSchema(oSServiceMethods.ByName("GetArchitecture")),
		connect.WithHandlerOptions(opts...),
	)
	oSServiceListArchitecturesHandler := connect.NewUnaryHandler(
		OSServiceListArchitecturesProcedure,
		svc.ListArchitectures,
		connect.WithSchema(oSServiceMethods.ByName("ListArchitectures")),
		connect.WithHandlerOptions(opts...),
	)
	oSServiceCreateArchitectureHandler := connect.NewUnaryHandler(
		OSServiceCreateArchitectureProcedure,
		svc.CreateArchitecture,
		connect.WithSchema(oSServiceMethods.ByName("CreateArchitecture")),
		connect.WithHandlerOptions(opts...),
	)
	oSServiceUpdateArchitectureHandler := connect.NewUnaryHandler(
		OSServiceUpdateArchitectureProcedure,
		svc.UpdateArchitecture,
		connect.WithSchema(oSServiceMethods.ByName("UpdateArchitecture")),
		connect.WithHandlerOptions(opts...),
	)
	oSServiceDeleteArchitectureHandler := connect.NewUnaryHandler(
		OSServiceDeleteArchitectureProcedure,
		svc.DeleteArchitecture,
		connect.WithSchema(oSServiceMethods.ByName("DeleteArchitecture")),
		connect.WithHandlerOptions(opts...),
	)
	return "/os.v1.OSService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OSServiceGetOSProcedure:
			oSServiceGetOSHandler.ServeHTTP(w, r)
		case OSServiceListOSsProcedure:
			oSServiceListOSsHandler.ServeHTTP(w, r)
		case OSServiceCreateOSProcedure:
			oSServiceCreateOSHandler.ServeHTTP(w, r)
		case OSServiceUpdateOSProcedure:
			oSServiceUpdateOSHandler.ServeHTTP(w, r)
		case OSServiceDeleteOSProcedure:
			oSServiceDeleteOSHandler.ServeHTTP(w, r)
		case OSServiceGetArchitectureProcedure:
			oSServiceGetArchitectureHandler.ServeHTTP(w, r)
		case OSServiceListArchitecturesProcedure:
			oSServiceListArchitecturesHandler.ServeHTTP(w, r)
		case OSServiceCreateArchitectureProcedure:
			oSServiceCreateArchitectureHandler.ServeHTTP(w, r)
		case OSServiceUpdateArchitectureProcedure:
			oSServiceUpdateArchitectureHandler.ServeHTTP(w, r)
		case OSServiceDeleteArchitectureProcedure:
			oSServiceDeleteArchitectureHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOSServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOSServiceHandler struct{}

func (UnimplementedOSServiceHandler) GetOS(context.Context, *connect.Request[v1.GetOSRequest]) (*connect.Response[v1.GetOSResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("os.v1.OSService.GetOS is not implemented"))
}

func (UnimplementedOSServiceHandler) ListOSs(context.Context, *connect.Request[v1.ListOSsRequest]) (*connect.Response[v1.ListOSsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("os.v1.OSService.ListOSs is not implemented"))
}

func (UnimplementedOSServiceHandler) CreateOS(context.Context, *connect.Request[v1.CreateOSRequest]) (*connect.Response[v1.CreateOSResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("os.v1.OSService.CreateOS is not implemented"))
}

func (UnimplementedOSServiceHandler) UpdateOS(context.Context, *connect.Request[v1.UpdateOSRequest]) (*connect.Response[v1.UpdateOSResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("os.v1.OSService.UpdateOS is not implemented"))
}

func (UnimplementedOSServiceHandler) DeleteOS(context.Context, *connect.Request[v1.DeleteOSRequest]) (*connect.Response[v1.DeleteOSResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("os.v1.OSService.DeleteOS is not implemented"))
}

func (UnimplementedOSServiceHandler) GetArchitecture(context.Context, *connect.Request[v1.GetArchitectureRequest]) (*connect.Response[v1.GetArchitectureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("os.v1.OSService.GetArchitecture is not implemented"))
}

func (UnimplementedOSServiceHandler) ListArchitectures(context.Context, *connect.Request[v1.ListArchitecturesRequest]) (*connect.Response[v1.ListArchitecturesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("os.v1.OSService.ListArchitectures is not implemented"))
}

func (UnimplementedOSServiceHandler) CreateArchitecture(context.Context, *connect.Request[v1.CreateArchitectureRequest]) (*connect.Response[v1.CreateArchitectureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("os.v1.OSService.CreateArchitecture is not implemented"))
}

func (UnimplementedOSServiceHandler) UpdateArchitecture(context.Context, *connect.Request[v1.UpdateArchitectureRequest]) (*connect.Response[v1.UpdateArchitectureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("os.v1.OSService.UpdateArchitecture is not implemented"))
}

func (UnimplementedOSServiceHandler) DeleteArchitecture(context.Context, *connect.Request[v1.DeleteArchitectureRequest]) (*connect.Response[v1.DeleteArchitectureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("os.v1.OSService.DeleteArchitecture is not implemented"))
}
