// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccountType string

const (
	AccountTypeACCOUNTTYPEADMIN AccountType = "ACCOUNT_TYPE_ADMIN"
	AccountTypeACCOUNTTYPEUSER  AccountType = "ACCOUNT_TYPE_USER"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType
	Valid       bool // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type PaymentMethod string

const (
	PaymentMethodPAYMENTMETHODUNKNOWN PaymentMethod = "PAYMENT_METHOD_UNKNOWN"
	PaymentMethodPAYMENTMETHODVNPAY   PaymentMethod = "PAYMENT_METHOD_VNPAY"
	PaymentMethodPAYMENTMETHODMOMO    PaymentMethod = "PAYMENT_METHOD_MOMO"
)

func (e *PaymentMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentMethod(s)
	case string:
		*e = PaymentMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentMethod: %T", src)
	}
	return nil
}

type NullPaymentMethod struct {
	PaymentMethod PaymentMethod
	Valid         bool // Valid is true if PaymentMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentMethod) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentMethod), nil
}

type PaymentStatus string

const (
	PaymentStatusPAYMENTSTATUSUNKNOWN  PaymentStatus = "PAYMENT_STATUS_UNKNOWN"
	PaymentStatusPAYMENTSTATUSPENDING  PaymentStatus = "PAYMENT_STATUS_PENDING"
	PaymentStatusPAYMENTSTATUSSUCCESS  PaymentStatus = "PAYMENT_STATUS_SUCCESS"
	PaymentStatusPAYMENTSTATUSCANCELED PaymentStatus = "PAYMENT_STATUS_CANCELED"
	PaymentStatusPAYMENTSTATUSFAILED   PaymentStatus = "PAYMENT_STATUS_FAILED"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus
	Valid         bool // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type AccountBase struct {
	ID        int64
	Type      AccountType
	Name      string
	Username  string
	Password  string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type AccountUser struct {
	ID    int64
	Email string
}

type InstanceBase struct {
	ID        string
	AccountID int64
	OsID      string
	ArchID    string
	Name      string
	Cpu       int32
	Ram       int32
	Storage   int32
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type InstanceNetwork struct {
	ID        string
	PrivateIp string
	CreatedAt pgtype.Timestamptz
}

type OsArch struct {
	ID        string
	Name      string
	CreatedAt pgtype.Timestamptz
}

type OsBase struct {
	ID        string
	Name      string
	CreatedAt pgtype.Timestamptz
}

type OsImage struct {
	ID        string
	Name      string
	OsID      string
	ArchID    string
	CreatedAt pgtype.Timestamptz
}

type PaymentBase struct {
	ID          int64
	AccountID   int64
	Method      PaymentMethod
	Status      PaymentStatus
	Total       int64
	DateCreated pgtype.Timestamptz
}

type PaymentItem struct {
	ID        int64
	PaymentID int64
	Name      string
	Price     int64
}

type PaymentVnpay struct {
	ID                 int64
	VnpTxnRef          string
	VnpOrderInfo       string
	VnpTransactionNo   string
	VnpTransactionDate string
	VnpCreateDate      string
	VnpIpAddr          string
}
