// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: arch.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createArch = `-- name: CreateArch :one
INSERT INTO arch (id, name)
VALUES ($1, $2)
RETURNING id, name, created_at
`

type CreateArchParams struct {
	ID   string
	Name string
}

func (q *Queries) CreateArch(ctx context.Context, arg CreateArchParams) (Arch, error) {
	row := q.db.QueryRow(ctx, createArch, arg.ID, arg.Name)
	var i Arch
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteArch = `-- name: DeleteArch :exec
DELETE FROM arch
WHERE id = $1
`

func (q *Queries) DeleteArch(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteArch, id)
	return err
}

const getArch = `-- name: GetArch :one
SELECT arch.id, arch.name, arch.created_at
FROM arch
WHERE id = $1
`

func (q *Queries) GetArch(ctx context.Context, id string) (Arch, error) {
	row := q.db.QueryRow(ctx, getArch, id)
	var i Arch
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listArchs = `-- name: ListArchs :many
SELECT arch.id, arch.name, arch.created_at
FROM arch
WHERE (
  (id ILIKE '%' || $1 || '%' OR $1 IS NULL) AND
  (name ILIKE '%' || $2 || '%' OR $2 IS NULL) AND
  (created_at >= $3 OR $3 IS NULL) AND
  (created_at <= $4 OR $4 IS NULL)
)
`

type ListArchsParams struct {
	ID            pgtype.Text
	Name          pgtype.Text
	CreatedAtFrom pgtype.Timestamp
	CreatedAtTo   pgtype.Timestamp
}

func (q *Queries) ListArchs(ctx context.Context, arg ListArchsParams) ([]Arch, error) {
	rows, err := q.db.Query(ctx, listArchs,
		arg.ID,
		arg.Name,
		arg.CreatedAtFrom,
		arg.CreatedAtTo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Arch
	for rows.Next() {
		var i Arch
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArch = `-- name: UpdateArch :one
UPDATE arch
SET 
    id = COALESCE($2, id),
    name = COALESCE($3, name)
WHERE id = $1
RETURNING id, name, created_at
`

type UpdateArchParams struct {
	ID    string
	NewID pgtype.Text
	Name  pgtype.Text
}

func (q *Queries) UpdateArch(ctx context.Context, arg UpdateArchParams) (Arch, error) {
	row := q.db.QueryRow(ctx, updateArch, arg.ID, arg.NewID, arg.Name)
	var i Arch
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
