// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAccounts = `-- name: CountAccounts :one
SELECT COUNT(id)
FROM "account"."base"
WHERE (
  (id ILIKE '%' || $1 || '%' OR $1 IS NULL) AND
  (role = $2 OR $2 IS NULL) AND
  (name ILIKE '%' || $3 || '%' OR $3 IS NULL) AND
  (username ILIKE '%' || $4 || '%' OR $4 IS NULL) AND
  (created_at >= $5 OR $5 IS NULL) AND
  (created_at <= $6 OR $6 IS NULL)
)
`

type CountAccountsParams struct {
	ID            pgtype.Text
	Role          NullAccountRole
	Name          pgtype.Text
	Username      pgtype.Text
	CreatedAtFrom pgtype.Timestamptz
	CreatedAtTo   pgtype.Timestamptz
}

func (q *Queries) CountAccounts(ctx context.Context, arg CountAccountsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAccounts,
		arg.ID,
		arg.Role,
		arg.Name,
		arg.Username,
		arg.CreatedAtFrom,
		arg.CreatedAtTo,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO "account"."base" (role, name, username, password)
VALUES ($1, $2, $3, $4)
RETURNING id, role, name, username, password, created_at, updated_at
`

type CreateAccountParams struct {
	Role     AccountRole
	Name     string
	Username string
	Password string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (AccountBase, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Role,
		arg.Name,
		arg.Username,
		arg.Password,
	)
	var i AccountBase
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "account"."user" (id, email)
VALUES ($1, $2)
RETURNING id, email
`

type CreateUserParams struct {
	ID    int64
	Email string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (AccountUser, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Email)
	var i AccountUser
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM "account"."base"
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT b.id, b.role, b.name, b.username, b.password, b.created_at, b.updated_at, u.id, u.email
FROM "account"."base" b
LEFT JOIN "account"."user" u ON b.id = u.id
WHERE (
  (b.id = $1 OR $1 IS NULL) AND
  (b.username = $2 OR $2 IS NULL) AND
  (u.email = $3 OR $3 IS NULL)
)
`

type GetAccountParams struct {
	ID       pgtype.Int8
	Username pgtype.Text
	Email    pgtype.Text
}

type GetAccountRow struct {
	ID        int64
	Role      AccountRole
	Name      string
	Username  string
	Password  string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	ID_2      pgtype.Int8
	Email     pgtype.Text
}

func (q *Queries) GetAccount(ctx context.Context, arg GetAccountParams) (GetAccountRow, error) {
	row := q.db.QueryRow(ctx, getAccount, arg.ID, arg.Username, arg.Email)
	var i GetAccountRow
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.Email,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT u.id, u.email, b.id, b.role, b.name, b.username, b.password, b.created_at, b.updated_at
FROM "account"."user" u
INNER JOIN "account"."base" b ON b.id = u.id
WHERE (
  (b.role = 'USER') AND
  (b.id = $1 OR $1 IS NULL) AND
  (b.username = $2 OR $2 IS NULL) AND
  (u.email = $3 OR $3 IS NULL)
)
`

type GetUserParams struct {
	ID       pgtype.Int8
	Username pgtype.Text
	Email    pgtype.Text
}

type GetUserRow struct {
	ID        int64
	Email     string
	ID_2      int64
	Role      AccountRole
	Name      string
	Username  string
	Password  string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, arg.ID, arg.Username, arg.Email)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.ID_2,
		&i.Role,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, role, name, username, password, created_at, updated_at
FROM "account"."base"
WHERE (
  (id ILIKE '%' || $1 || '%' OR $1 IS NULL) AND
  (role = $2 OR $2 IS NULL) AND
  (name ILIKE '%' || $3 || '%' OR $3 IS NULL) AND
  (username ILIKE '%' || $4 || '%' OR $4 IS NULL) AND
  (created_at >= $5 OR $5 IS NULL) AND
  (created_at <= $6 OR $6 IS NULL)
)
ORDER BY created_at DESC
LIMIT $8
OFFSET $7
`

type ListAccountsParams struct {
	ID            pgtype.Text
	Role          NullAccountRole
	Name          pgtype.Text
	Username      pgtype.Text
	CreatedAtFrom pgtype.Timestamptz
	CreatedAtTo   pgtype.Timestamptz
	Offset        int32
	Limit         int32
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]AccountBase, error) {
	rows, err := q.db.Query(ctx, listAccounts,
		arg.ID,
		arg.Role,
		arg.Name,
		arg.Username,
		arg.CreatedAtFrom,
		arg.CreatedAtTo,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountBase
	for rows.Next() {
		var i AccountBase
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.Name,
			&i.Username,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE "account"."base"
SET
    name = COALESCE($2, name),
    username = COALESCE($3, username),
    password = COALESCE($4, password)
WHERE id = $1
RETURNING id, role, name, username, password, created_at, updated_at
`

type UpdateAccountParams struct {
	ID       int64
	Name     pgtype.Text
	Username pgtype.Text
	Password pgtype.Text
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (AccountBase, error) {
	row := q.db.QueryRow(ctx, updateAccount,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.Password,
	)
	var i AccountBase
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
