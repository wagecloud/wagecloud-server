// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (id, name, email, created_at)
VALUES (DEFAULT, $1, $2, NOW())
RETURNING id, name, email, created_at
`

type CreateAccountParams struct {
	Name  pgtype.Text
	Email string
}

type CreateAccountRow struct {
	ID        int64
	Name      pgtype.Text
	Email     string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.Name, arg.Email)
	var i CreateAccountRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, name, email, created_at
FROM account
WHERE id = $1
`

type GetAccountByIDRow struct {
	ID        int64
	Name      pgtype.Text
	Email     string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) GetAccountByID(ctx context.Context, id int64) (GetAccountByIDRow, error) {
	row := q.db.QueryRow(ctx, getAccountByID, id)
	var i GetAccountByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, name, email, created_at
FROM account
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32
	Offset int32
}

type ListAccountsRow struct {
	ID        int64
	Name      pgtype.Text
	Email     string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]ListAccountsRow, error) {
	rows, err := q.db.Query(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAccountsRow
	for rows.Next() {
		var i ListAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE account
SET name = $2, email = $3
WHERE id = $1
RETURNING id, name, email, created_at
`

type UpdateAccountParams struct {
	ID    int64
	Name  pgtype.Text
	Email string
}

type UpdateAccountRow struct {
	ID        int64
	Name      pgtype.Text
	Email     string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (UpdateAccountRow, error) {
	row := q.db.QueryRow(ctx, updateAccount, arg.ID, arg.Name, arg.Email)
	var i UpdateAccountRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
