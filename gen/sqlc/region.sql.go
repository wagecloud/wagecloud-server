// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: region.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countRegions = `-- name: CountRegions :one
SELECT COUNT(id)
FROM "instance"."region"
WHERE (
  (id = $1 OR $1 IS NULL) AND
  (name ILIKE '%' || $2 || '%' OR $2 IS NULL)
)
`

type CountRegionsParams struct {
	ID   pgtype.Text
	Name pgtype.Text
}

func (q *Queries) CountRegions(ctx context.Context, arg CountRegionsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countRegions, arg.ID, arg.Name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createRegion = `-- name: CreateRegion :one
INSERT INTO "instance"."region" (id, name)
VALUES ($1, $2)
RETURNING id, name
`

type CreateRegionParams struct {
	ID   string
	Name string
}

func (q *Queries) CreateRegion(ctx context.Context, arg CreateRegionParams) (InstanceRegion, error) {
	row := q.db.QueryRow(ctx, createRegion, arg.ID, arg.Name)
	var i InstanceRegion
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteRegion = `-- name: DeleteRegion :exec
DELETE FROM "instance"."region"
WHERE id = $1
`

func (q *Queries) DeleteRegion(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteRegion, id)
	return err
}

const getRegion = `-- name: GetRegion :one
SELECT region.id, region.name
FROM "instance"."region" region
WHERE id = $1
`

func (q *Queries) GetRegion(ctx context.Context, id string) (InstanceRegion, error) {
	row := q.db.QueryRow(ctx, getRegion, id)
	var i InstanceRegion
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listRegions = `-- name: ListRegions :many
SELECT region.id, region.name
FROM "instance"."region" region
WHERE (
  (id = $1 OR $1 IS NULL) AND
  (name ILIKE '%' || $2 || '%' OR $2 IS NULL)
)
ORDER BY id DESC
LIMIT $4
OFFSET $3
`

type ListRegionsParams struct {
	ID     pgtype.Text
	Name   pgtype.Text
	Offset int32
	Limit  int32
}

func (q *Queries) ListRegions(ctx context.Context, arg ListRegionsParams) ([]InstanceRegion, error) {
	rows, err := q.db.Query(ctx, listRegions,
		arg.ID,
		arg.Name,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InstanceRegion
	for rows.Next() {
		var i InstanceRegion
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRegion = `-- name: UpdateRegion :one
UPDATE "instance"."region"
SET
    id = COALESCE($2, id),
    name = COALESCE($3, name)
WHERE id = $1
RETURNING id, name
`

type UpdateRegionParams struct {
	ID    string
	NewID pgtype.Text
	Name  pgtype.Text
}

func (q *Queries) UpdateRegion(ctx context.Context, arg UpdateRegionParams) (InstanceRegion, error) {
	row := q.db.QueryRow(ctx, updateRegion, arg.ID, arg.NewID, arg.Name)
	var i InstanceRegion
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
