// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: network.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNetwork = `-- name: CreateNetwork :one
INSERT INTO network (id, private_ip)
VALUES ($1, $2)
RETURNING id, private_ip, created_at
`

type CreateNetworkParams struct {
	ID        string
	PrivateIp string
}

func (q *Queries) CreateNetwork(ctx context.Context, arg CreateNetworkParams) (Network, error) {
	row := q.db.QueryRow(ctx, createNetwork, arg.ID, arg.PrivateIp)
	var i Network
	err := row.Scan(&i.ID, &i.PrivateIp, &i.CreatedAt)
	return i, err
}

const deleteNetwork = `-- name: DeleteNetwork :exec
DELETE FROM network
WHERE id = $1
`

func (q *Queries) DeleteNetwork(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteNetwork, id)
	return err
}

const getNetwork = `-- name: GetNetwork :one
SELECT network.id, network.private_ip, network.created_at
FROM network
WHERE id = $1
`

func (q *Queries) GetNetwork(ctx context.Context, id string) (Network, error) {
	row := q.db.QueryRow(ctx, getNetwork, id)
	var i Network
	err := row.Scan(&i.ID, &i.PrivateIp, &i.CreatedAt)
	return i, err
}

const listNetworks = `-- name: ListNetworks :many
SELECT network.id, network.private_ip, network.created_at
FROM network
WHERE (
  (id ILIKE '%' || $1 || '%' OR $1 IS NULL) AND
  (private_ip ILIKE '%' || $2 || '%' OR $2 IS NULL) AND
  (created_at >= $3 OR $3 IS NULL) AND
  (created_at <= $4 OR $4 IS NULL)
)
`

type ListNetworksParams struct {
	ID            pgtype.Text
	PrivateIp     pgtype.Text
	CreatedAtFrom pgtype.Timestamp
	CreatedAtTo   pgtype.Timestamp
}

func (q *Queries) ListNetworks(ctx context.Context, arg ListNetworksParams) ([]Network, error) {
	rows, err := q.db.Query(ctx, listNetworks,
		arg.ID,
		arg.PrivateIp,
		arg.CreatedAtFrom,
		arg.CreatedAtTo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Network
	for rows.Next() {
		var i Network
		if err := rows.Scan(&i.ID, &i.PrivateIp, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNetwork = `-- name: UpdateNetwork :one
UPDATE network
SET 
    id = COALESCE($2, id),
    private_ip = COALESCE($3, private_ip)
WHERE id = $1
RETURNING id, private_ip, created_at
`

type UpdateNetworkParams struct {
	ID        string
	NewID     pgtype.Text
	PrivateIp pgtype.Text
}

func (q *Queries) UpdateNetwork(ctx context.Context, arg UpdateNetworkParams) (Network, error) {
	row := q.db.QueryRow(ctx, updateNetwork, arg.ID, arg.NewID, arg.PrivateIp)
	var i Network
	err := row.Scan(&i.ID, &i.PrivateIp, &i.CreatedAt)
	return i, err
}
